# -*- coding: utf-8 -*-
"""web scraping com python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1INv9KcqtBfbuwwPhC1LMVj5QMAdFXLDs

## 0 - Bibliotecas
"""

#Para scraping
from bs4 import BeautifulSoup
import requests

#Para manipulação de dados
import pandas as pd

"""## 1 - Request da página

"""

url = "https://lol.fandom.com/wiki/CBLOL/2023_Season/Split_2/Player_Statistics" #url da página escolhida para scraping

page = requests.get(url)

soup = BeautifulSoup(page.text, 'html')

#Código html da página desejada
print(soup.prettify())

"""## 2 - Seleção da tabela de interesse

Usando o método find_all encontramos todas as tags 'table', dentre elas selecionamos a que contem os dados que procuramos.
"""

#Tabela desejada
table_stats_cblol = soup.find_all('table')[4]
table_stats_cblol

"""Buscamos encontrar os rótulos referentes às colunas da tabela com o método find_all, após inspecionar a página da qual estamos extraindo os dados, com o obejtivo de criar a estrutura do dataframe."""

#Nomes das colunas
nomes_colunas = table_stats_cblol.find_all('th')
nomes_colunas

#Nomes das colunas da tabela
titulos_colunas = [nomes.text for nomes in nomes_colunas][4:]
titulos_colunas

"""**Problema**: os dois primeiros valores são vazios. Precisamos preencher eles com os rótulos referentes as colunas.

##3 - Criando estrutura do Dataframe

Uma vez criada a lista com os nomes referência para cada coluna da tabela, criamos a estrutura do dataframe. Precisamos também renomear as calunas sem nome, usamos a biblioteca pandas para tal.
"""

#criando o dataframe
df_cblol = pd.DataFrame(columns = titulos_colunas)

#Atribuindo títulos distintos para colunas de mesmo título
cols = []
count = 1
for column in df_cblol.columns:
    if column == '':
        cols.append(f'col_{count}')
        count+=1
        continue
    cols.append(column)
df_cblol.columns = cols

#Atribuindo os títulos finais
df_cblol.rename(columns={"col_1":"Team"}, inplace=True)
df_cblol.rename(columns={"col_2":"Player"}, inplace=True)

#Estrutura do dataframe criada
df_cblol

#Procurando os dados para alimentar o dataframe
#tr é a tag que indica as linhas. r = row
column_data = table_stats_cblol.find_all('tr')[5:]
column_data

#Adicionando dados para cada linha do dataframe
#td é a tag que indica os dados. d = data.
for row in column_data:
  row_data = row.find_all('td')
  data_row_individual = [data.text for data in row_data]
  lenth = len(df_cblol)
  df_cblol.loc[lenth] = data_row_individual

"""## 4 - Colunas com nome e dados faltantes.

Até aqui preenchemos praticamente todo o dataframe de uma única vez, porém as colunas 'Team' e 'Champ' estão vazias.

As tags necessárias para acessar os dados da coluna 'Team' não são as mesmas as quais utilizamos para as demais colunas. Em virtude disso, fazemos uma nova solicitação em busca das tags corretas.
"""

teams = soup.find_all(['td'], class_ = ['spstats-team'])
teams

#Adicionando os valores à coluna 'Team' e limpandos os referentes dados.
names_team = []
for team in teams:
  row_team = team.find('a')
  names_team.append(row_team.get('data-to-id'))

names_cblol_team = pd.Series(names_team)
names_cblol_team.replace({'KaBuM_21-_Esports':'KaBuM! Esports',
                          'Los_Grandes':'Los Grandes',
                          'PaiN_Gaming':'PaiN Gaming',
                          'RED_Canids':'RED Canids',
                          'Vivo_Keyd_Stars':'Vivo Keyd Stars'}, inplace=True)

#Verificando os dados
names_cblol_team

#Atribuindo os valores à coluna 'Team'
df_cblol['Team'] = names_cblol_team

df_cblol

"""
## 4.1 - Configurando os tipos de dados
**Dtypes das colunas do dataframe**

Nem todos os dados até o momento têm o tipo mais desejado, essa seção voltamos nossa atenção a isso.

'Team' = str

 'Player' = str

 'G' = int

 'W' = int

 'L' = int

 'WR' = obj

 'K' = float

 'D' = float

 'A' = float

 'KDA' = float

 'CS' = float

 'CS/M' = float

 'G' = obj

 'G/M' = float

 'DMG'= obj

 'DMG/M' = float

 'KPAR' = obj

 'KS' = obj

 'GS' = obj

 'CP' = int

 'Champs' = str"""

#dtype atuais
df_cblol.dtypes

#Estabelecendo os tipos de dados corretos
df_cblol = df_cblol.astype({'Team': str,
                  'Player': str,
                  'G': int,
                  'W': int,
                  'L': int,
                  'WR': object,
                  'K': float,
                  'D': float,
                  'A': float,
                  'KDA': float,
                  'CS': float,
                  'CS/M': float,
                  'G': object,
                  'G/M': float,
                  'DMG': object,
                  'DMG/M': float,
                  'KPAR': object,
                  'KS': object,
                  'GS': object,
                  'CP': int,
                  'Champs': str})

df_cblol['G'] = (df_cblol['G'].astype(float)).astype(int) #a feature G não mudou o dtype na primeira reconfiguração

#dtype atuais corrigidos
df_cblol.dtypes

"""## 4.2 - Tratamento da coluna champs

**Problema** A coluna 'Champs' refere-se, originalmente, a listas com três valores cada referentes a cada jogador. Optei por mudar a coluna de 'Champs' para 'MPC'(most played champion), indicando não campeões mais jogados, mas sim O campeão mais jogado por cada jogador.
"""

#lista com informações dos champions contidas na tag span
table_played_champion = soup.find_all('span', class_ = 'sprite champion-sprite')[10:]
table_played_champion

mpc_cblol = [] #três campeões mais jogados por cada jogador
for champion in table_played_champion:
  mpc_cblol.append(champion.get('title'))

mpc = [] #campeão mais jogado por cada jogador

n = range(0, len(mpc_cblol), 3)
for i in n:
  mpc.append(mpc_cblol[i])

mpc = pd.Series(mpc) #armazenando como uma serie

#modificando a última coluna e adicionando valores
df_cblol.rename(columns = {'Champs':'mpc'}, inplace = True)
df_cblol['mpc'] = mpc

df_cblol

"""## 5 - Salvando o DataFrame como um csv

Agora que finalizamos todo o scraping e criamos nosso dataframe, podemos salva-lo facilmente para exportação.
"""

#Salvando como csv
df_cblol.to_csv('cblol_players_stats.csv', sep = ',', index=False)